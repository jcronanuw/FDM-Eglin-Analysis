#Update list to remove any stands that have been overwritten.
Stand.List <- Stand.List[(Area.List == 0) == F]
Fuelbed.List <- Fuelbed.List[(Area.List == 0) == F]
Age.List <- Age.List[(Area.List == 0) == F]
Coord.List <- Coord.List[(Area.List == 0) == F]
MU.List <- MU.List[(Area.List == 0) == F]
mfri.Matrix <- mfri.Matrix[(Area.List == 0) == F,]
mfri_lower.List <- mfri_lower.List[(Area.List == 0) == F]
mfri_upper.List <- mfri_upper.List[(Area.List == 0) == F]
Area.List <- Area.List[(Area.List == 0) == F]
#Update list to add new stands.
Stand.List <- c(Stand.List, loopE_allFire$NewStand)
Fuelbed.List <- c(Fuelbed.List, loopE_allFire$newFuelbed)
Age.List <- c(Age.List, loopE_allFire$newAge)
#List new stand occurrences in s.map
vs.map_a20 <- s.map[s.map %in% loopE.NewStand]
#List corresponding coordinates (l.map) for new stand occurrences in s.map
vl.map_a20 <- l.map[s.map %in% loopE.NewStand]
#Use summarize function (w/ min()) to select a single coordinate value for each new stand.
v.Coord_a20a <- summarize(vl.map_a20,vs.map_a20,min)
#Subset coordinates
v.Coord_a20b <- as.vector(v.Coord_a20a[,2])
#Update
Coord.List <- c(Coord.List,v.Coord_a20b)
MU.List <- c(MU.List, smud)
mfri.Matrix <- rbind(mfri.Matrix,nmvd)
mfri.List <- apply(mfri.Matrix,1,sum)
mfri.List <- round(30/mfri.List,0)
mfri.List <- ifelse(mfri.List == Inf, 32, mfri.List)
#Update
mfri_lower.List <- c(mfri_lower.List,
fuelbed_lut$mfri_shortens[match(loopE_allFire$newFuelbed,
fuelbed_lut$fuelbed)])
#Select option 1 for fuelbed transition when mfri lengthens
mfri_lengthens_1 <- fuelbed_lut$mfri_lengthens_1[match(loopE_allFire$newFuelbed,
fuelbed_lut$fuelbed)]
#Select option 2 for fuelbed transition when mfri lengthens
mfri_lengthens_2 <- fuelbed_lut$mfri_lengthens_2[match(loopE_allFire$newFuelbed,
fuelbed_lut$fuelbed)]
#Randomly choose between option 1 and 2 for each fuelebd.
mfri_lengthens <- apply(matrix(data = c(mfri_lengthens_1,
mfri_lengthens_2),length(mfri_lengthens_1), 2),
1, sample, size = 1)
#Update
mfri_upper.List <- c(mfri_upper.List, mfri_lengthens)
#Update
Area.List <- c(Area.List,loopE.Area)
#order .List objects by stand number
Fuelbed.List <- Fuelbed.List[order(Stand.List)]
MU.List <- MU.List[order(Stand.List)]
Area.List <- Area.List[order(Stand.List)]
mfri.Matrix <- mfri.Matrix[order(Stand.List),]
Age.List <- Age.List[order(Stand.List)]
mfri_lower.List <- mfri_lower.List[order(Stand.List)]
mfri_upper.List <- mfri_upper.List[order(Stand.List)]
Stand.List <- sort(Stand.List)
#Update time-since-last-treatment list and associated stand list
replaced.stands.in.tslt <- loopE_allFire$ReplacedStand[mapply(function(y)
{as.numeric(strsplit(as.character(y), "")[[1]])[4]},
loopE_allFire$newFuelbed) %in% c(2,3,4,6,7,8)]
tslt.List <- c(tslt.List, tslt.List[match(replaced.stands.in.tslt, tslt.Stands)])
tslt.Stands <- c(tslt.Stands, loopE_allFire$NewStand[mapply(function(y)
{as.numeric(strsplit(as.character(y), "")[[1]])[4]}
, loopE_allFire$newFuelbed) %in% c(2,3,4,6,7,8)])
tslt.Fuelbeds <- c(tslt.Fuelbeds, loopE_allFire$newFuelbed[mapply(function(y)
{as.numeric(strsplit(as.character(y), "")[[1]])[4]}
, loopE_allFire$newFuelbed) %in% c(2,3,4,6,7,8)])
#Remove stands that have been overwritten
tslt.List <- tslt.List[!(is.na(match(tslt.Stands, Stand.List[Stand.List %in% tslt.Stands])))]
tslt.Fuelbeds <- tslt.Fuelbeds[!(is.na(match(tslt.Stands, Stand.List[Stand.List %in% tslt.Stands])))]
tslt.Stands <- tslt.Stands[!(is.na(match(tslt.Stands, Stand.List[Stand.List %in% tslt.Stands])))]
#Update files based on time-since-last-treatment>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#Show max time-since-last-treatment before state transitions for each fuelbed
max_tslt <- fuelbed_lut$max_tslt[fuelbed_lut$fuelbed %in% tslt.Fuelbeds]
#List each of the fuelbeds corresponding with tslt object above
max_tslt_fb <- fuelbed_lut$fuelbed[fuelbed_lut$fuelbed %in% tslt.Fuelbeds]
#Expand to the max tslt object for each row in tslt.List
max_tslt_x_stand <- max_tslt[match(tslt.Fuelbeds, max_tslt_fb)]
#Crash model is Fuelbed.List turned into a list()
if(length(max_tslt_x_stand) != length(tslt.List))
{
r101 <- "inconcistency in tslt tracking"
break
} else
{
r101 <- r101
}
#List stand numbers for stands that will transition.
replace_stands <- tslt.Stands[tslt.List > max_tslt_x_stand]
#List fuelbeds of stands that will transition.
replace_fbs <- tslt.Fuelbeds[tslt.List > max_tslt_x_stand]
#List unique current fuelbeds for stands that will transition.
old_fbs <- fuelbed_lut$fuelbed[fuelbed_lut$fuelbed %in% replace_fbs]
#List unique new fuelbeds for stands that will transition.
new_fbs <- fuelbed_lut$post_1[fuelbed_lut$fuelbed %in% replace_fbs]
#List unique new lower mFRI limit fuelbeds for stands that will transition.
new_lower <- mapply(function(y)
{
fuelbed_lut$mfri_shortens[fuelbed_lut$fuelbed == y]
},
new_fbs)
#List unique new upper mFRI limit fuelbeds for stands that will transition.
new_upper_1 <- mapply(function(y)
{
fuelbed_lut$mfri_lengthens_1[fuelbed_lut$fuelbed == y]
},
new_fbs)
new_upper_2 <- mapply(function(y)
{
fuelbed_lut$mfri_lengthens_1[fuelbed_lut$fuelbed == y]
},
new_fbs)
#Expand new unique fuelbeds to the number of stands that will transition.
new_fbs_x_stand <- new_fbs[match(replace_fbs, old_fbs)]
new_lower_x_stand <- new_lower[match(replace_fbs, old_fbs)]
new_upper_1_x_stand <- new_upper_1[match(replace_fbs, old_fbs)]
new_upper_2_x_stand <- new_upper_2[match(replace_fbs, old_fbs)]
new_upper_x_stand <- apply(matrix(data = c(new_upper_1_x_stand, new_upper_2_x_stand),
length(new_upper_1_x_stand), 2), 1, sample,
size = 1)
#Replace current fuelbeds with new ones in cases where tslt exceeds limit for
#state.
tslt.Fuelbeds[tslt.Stands %in% replace_stands] <- new_fbs_x_stand
#Order tslt objects by stand number before you apply it to .List objects
tslt.List <- tslt.List[order(tslt.Stands)]
tslt.Fuelbeds <- tslt.Fuelbeds[order(tslt.Stands)]
tslt.Stands <- sort(tslt.Stands)
#Apply changes to f.map, Fuelbed.List, mfri_lower.List, and mfri_upper.List.
vt.map <- s.map[s.map %in% tslt.Stands]
v.tslt <- tslt.Fuelbeds[match(vt.map, tslt.Stands)]
f.map[s.map %in% tslt.Stands] <- v.tslt
Fuelbed.List[Stand.List %in% tslt.Stands] <- tslt.Fuelbeds
mfri_lower.List[Stand.List %in% replace_stands] <- new_lower_x_stand
mfri_upper.List[Stand.List %in% replace_stands] <- new_upper_x_stand
#Remove rows where fuelbeds no longer represent a silvicultural treatment
tslt.List <- tslt.List[which(mapply(function(y)
{as.numeric(strsplit(as.character(y), "")[[1]])[4]}
, tslt.Fuelbeds) %in% c(2,3,4,6,7,8) == T)]
tslt.Stands <- tslt.Stands[which(mapply(function(y)
{as.numeric(strsplit(as.character(y), "")[[1]])[4]}
, tslt.Fuelbeds) %in% c(2,3,4,6,7,8) == T)]
tslt.Fuelbeds <- tslt.Fuelbeds[which(mapply(function(y)
{as.numeric(strsplit(as.character(y), "")[[1]])[4]}
, tslt.Fuelbeds) %in% c(2,3,4,6,7,8) == T)]
##############################################################################
##############################################################################
##############################################################################
#ONLY TO DIAGNOSE ERRORS FROM MODEL RUN 101                                 #
#DRAG ON TIME, REMOVE AFTER ERRORS DIAGNOSED                                #
if(any(c(length(Stand.List),
length(Fuelbed.List),
length(mfri.List),
length(MU.List),
#length(T1E.List),
#length(T2E.List),
#length(D1E.List),
#length(D2E.List),
length(Area.List),
length(mfri_lower.List),
length(mfri_upper.List),
length(Age.List)) != (length(unique(as.vector(s.map)))-1)) == T)
{
r101 <- 3
break
} else
{
r101 <- ifelse(any(s.map < 0 & s.map > -9999),33,0)
}
##############################################################################
##############################################################################
##############################################################################
#Update fuelbeds based on impacts of changing mean fire return interval.
#Make a copy of the Fuelbed.List
feof <- Fuelbed.List
#Create a parelle list that shows lower bound of mFRI for each stand
mfri_lower <- fuelbed_lut$mfri_lower[match(feof,fuelbed_lut$fuelbed)]
#Create a parellel list that shows upper bound of mFRI for each stand
mfri_upper <- fuelbed_lut$mfri_upper[match(feof,fuelbed_lut$fuelbed)]
#Replace fuelbed with one representing a more frequent fire regime if the mFRI is shorter
#than the lower limit for the current fuelbed.
feof[mfri.List <  mfri_lower] <- mfri_lower.List[mfri.List < mfri_lower]
#Replace fuelbed with one representing a less frequent fire regime if the mFRI is longer
#than the lower limit for the current fuelbed.
feof[mfri.List > mfri_upper] <- mfri_upper.List[mfri.List > mfri_upper]
#Update f.map
#Improved function to update f.map based on mFRI. Former code used a for()
s.SL <- Stand.List[Fuelbed.List != feof]
feof2 <- feof[Fuelbed.List != feof]
vs.map <- s.map[s.map %in% s.SL]
v.feof2 <- feof2[match(vs.map, s.SL)]
f.map[s.map %in% s.SL] <- v.feof2
stands.affected.by.fire.succession <- Stand.List[Fuelbed.List != feof]
Fuelbed.List <- feof
} else
{
#Update mfri List (not done after loop 2, so even if there are no wildfires
#we still need to account for new treatments)
mfri.List <- apply(mfri.Matrix,1,sum)
mfri.List <- round(30/mfri.List,0)
mfri.List <- ifelse(mfri.List == Inf, 32, mfri.List)
#Update files based on time-since-last-treatment>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#Show max time-since-last-treatment before state transitions for each fuelbed
max_tslt <- fuelbed_lut$max_tslt[fuelbed_lut$fuelbed %in% tslt.Fuelbeds]
#List each of the fuelbeds corresponding with tslt object above
max_tslt_fb <- fuelbed_lut$fuelbed[fuelbed_lut$fuelbed %in% tslt.Fuelbeds]
#Expand to the max tslt object for each row in tslt.List
max_tslt_x_stand <- max_tslt[match(tslt.Fuelbeds, max_tslt_fb)]
#Crash model is Fuelbed.List turned into a list()
if(length(max_tslt_x_stand) != length(tslt.List))
{
r101 <- "inconcistency in tslt tracking"
break
} else
{
r101 <- r101
}
#List stand numbers for stands that will transition.
replace_stands <- tslt.Stands[tslt.List > max_tslt_x_stand]
#List fuelbeds of stands that will transition.
replace_fbs <- tslt.Fuelbeds[tslt.List > max_tslt_x_stand]
#List unique current fuelbeds for stands that will transition.
old_fbs <- fuelbed_lut$fuelbed[fuelbed_lut$fuelbed %in% replace_fbs]
#List unique new fuelbeds for stands that will transition.
new_fbs <- fuelbed_lut$post_1[fuelbed_lut$fuelbed %in% replace_fbs]
#List unique new lower mFRI limit fuelbeds for stands that will transition.
new_lower <- mapply(function(y)
{
fuelbed_lut$mfri_shortens[fuelbed_lut$fuelbed == y]
},
new_fbs)
#List unique new upper mFRI limit fuelbeds for stands that will transition.
new_upper_1 <- mapply(function(y)
{
fuelbed_lut$mfri_lengthens_1[fuelbed_lut$fuelbed == y]
},
new_fbs)
new_upper_2 <- mapply(function(y)
{
fuelbed_lut$mfri_lengthens_1[fuelbed_lut$fuelbed == y]
},
new_fbs)
#Expand new unique fuelbeds to the number of stands that will transition.
new_fbs_x_stand <- new_fbs[match(replace_fbs, old_fbs)]
new_lower_x_stand <- new_lower[match(replace_fbs, old_fbs)]
new_upper_1_x_stand <- new_upper_1[match(replace_fbs, old_fbs)]
new_upper_2_x_stand <- new_upper_2[match(replace_fbs, old_fbs)]
new_upper_x_stand <- apply(matrix(data = c(new_upper_1_x_stand, new_upper_2_x_stand),
length(new_upper_1_x_stand), 2), 1, sample,
size = 1)
#Replace current fuelbeds with new ones in cases where tslt exceeds limit for
#state.
tslt.Fuelbeds[tslt.Stands %in% replace_stands] <- new_fbs_x_stand
#Order tslt objects by stand number before you apply it to .List objects
tslt.List <- tslt.List[order(tslt.Stands)]
tslt.Fuelbeds <- tslt.Fuelbeds[order(tslt.Stands)]
tslt.Stands <- sort(tslt.Stands)
#Apply changes to f.map, Fuelbed.List, mfri_lower.List, and mfri_upper.List.
vt.map <- s.map[s.map %in% tslt.Stands]
v.tslt <- tslt.Fuelbeds[match(vt.map, tslt.Stands)]
f.map[s.map %in% tslt.Stands] <- v.tslt
Fuelbed.List[Stand.List %in% tslt.Stands] <- tslt.Fuelbeds
mfri_lower.List[Stand.List %in% replace_stands] <- new_lower_x_stand
mfri_upper.List[Stand.List %in% replace_stands] <- new_upper_x_stand
#Remove stands that have been overwritten
tslt.List <- tslt.List[!(is.na(match(tslt.Stands, Stand.List[Stand.List %in% tslt.Stands])))]
tslt.Fuelbeds <- tslt.Fuelbeds[!(is.na(match(tslt.Stands, Stand.List[Stand.List %in% tslt.Stands])))]
tslt.Stands <- tslt.Stands[!(is.na(match(tslt.Stands, Stand.List[Stand.List %in% tslt.Stands])))]
#Remove rows where fuelbeds no longer represent a silvicultural treatment
tslt.List <- tslt.List[which(mapply(function(y)
{as.numeric(strsplit(as.character(y), "")[[1]])[4]}
, tslt.Fuelbeds) %in% c(2,3,4,6,7,8) == T)]
tslt.Stands <- tslt.Stands[which(mapply(function(y)
{as.numeric(strsplit(as.character(y), "")[[1]])[4]}
, tslt.Fuelbeds) %in% c(2,3,4,6,7,8) == T)]
tslt.Fuelbeds <- tslt.Fuelbeds[which(mapply(function(y)
{as.numeric(strsplit(as.character(y), "")[[1]])[4]}
, tslt.Fuelbeds) %in% c(2,3,4,6,7,8) == T)]
##############################################################################
##############################################################################
##############################################################################
#ONLY TO DIAGNOSE ERRORS FROM MODEL RUN 101                                 #
#DRAG ON TIME, REMOVE AFTER ERRORS DIAGNOSED                                #
if(any(c(length(Stand.List),
length(Fuelbed.List),
length(mfri.List),
length(MU.List),
#length(T1E.List),
#length(T2E.List),
#length(D1E.List),
#length(D2E.List),
length(Area.List),
length(mfri_lower.List),
length(mfri_upper.List),
length(Age.List)) != (length(unique(as.vector(s.map)))-1)) == T)
{
r101 <- 3
break
} else
{
r101 <- ifelse(any(s.map < 0 & s.map > -9999),33,0)
}
##############################################################################
##############################################################################
##############################################################################
#Update fuelbeds based on impacts of changing mean fire return interval.
#Make a copy of the Fuelbed.List
feof <- Fuelbed.List
#Create a parelle list that shows lower bound of mFRI for each stand
mfri_lower <- fuelbed_lut$mfri_lower[match(feof,fuelbed_lut$fuelbed)]
#Create a parellel list that shows upper bound of mFRI for each stand
mfri_upper <- fuelbed_lut$mfri_upper[match(feof,fuelbed_lut$fuelbed)]
#Replace fuelbed with one representing a more frequent fire regime if the mFRI is shorter
#than the lower limit for the current fuelbed.
feof[mfri.List <  mfri_lower] <- mfri_lower.List[mfri.List < mfri_lower]
#Replace fuelbed with one representing a less frequent fire regime if the mFRI is longer
#than the lower limit for the current fuelbed.
feof[mfri.List > mfri_upper] <- mfri_upper.List[mfri.List > mfri_upper]
#Update f.map
#Improved function to update f.map based on mFRI. Former code used a for()
s.SL <- Stand.List[Fuelbed.List != feof]
feof2 <- feof[Fuelbed.List != feof]
vs.map <- s.map[s.map %in% s.SL]
v.feof2 <- feof2[match(vs.map, s.SL)]
f.map[s.map %in% s.SL] <- v.feof2
stands.affected.by.fire.succession <- Stand.List[Fuelbed.List != feof]
Fuelbed.List <- feof
}
#Pass on error messages and break if necessary
if(r101 == 0)
{
r101 <- r101
} else
{
r101 <- r101
break
}
#Post-wildfire processing >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#Update files based on succession>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#Identify potential changes in fuelbeds based on succession pathways.
pmuf <- mapply(function(x) ifelse(
Age.List[x] > fuelbed_lut$succession_max[fuelbed_lut$fuelbed == Fuelbed.List[x]],
ifelse(fuelbed_lut$succession_post_2[fuelbed_lut$fuelbed == Fuelbed.List[x]] > 0,
resample(c(fuelbed_lut$succession_post_1[fuelbed_lut$fuelbed == Fuelbed.List[x]],
fuelbed_lut$succession_post_2[fuelbed_lut$fuelbed == Fuelbed.List[x]]),1),
fuelbed_lut$succession_post_1[fuelbed_lut$fuelbed == Fuelbed.List[x]]),
Fuelbed.List[x]),1:length(Stand.List))
#Update f.map
#Improved function to update f.map based on mFRI. Former code used a for()
s.SL2 <- Stand.List[Fuelbed.List != pmuf]
pmuf2 <- pmuf[Fuelbed.List != pmuf]
vs.map2 <- s.map[s.map %in% s.SL2]
v.pmuf2 <- pmuf2[match(vs.map2, s.SL2)]
f.map[s.map %in% s.SL2] <- v.pmuf2
stands.affected.by.age.succession <- Stand.List[Fuelbed.List != pmuf]
Fuelbed.List[Stand.List %in% s.SL2] <- pmuf2
#update mfri_lower.List and mfri_upper.List based on changes in Fuelbed map from feof and pmuf
#Stand affected by change in mean fire return interval or age.
stands.that.shifted <- sort(unique(c(stands.affected.by.age.succession,
stands.affected.by.fire.succession)))
#Corresponding fuels
fuels.that.shifted_Xstand <- Fuelbed.List[Stand.List %in% stands.that.shifted]
#List of unique fuelbeds
fuels.that.shifted <- sort(unique(fuels.that.shifted_Xstand))
#List unique new lower mFRI limit fuelbeds for stands that will transition.
shift_lower <- fuelbed_lut$mfri_shortens[fuelbed_lut$fuelbed %in% fuels.that.shifted]
#List unique new upper mFRI limit fuelbeds for stands that will transition.
shift_upper_1 <- fuelbed_lut$mfri_lengthens_1[fuelbed_lut$fuelbed %in% fuels.that.shifted]
shift_upper_2 <- fuelbed_lut$mfri_lengthens_1[fuelbed_lut$fuelbed %in% fuels.that.shifted]
shift_lower_x_stand <- shift_lower[match(fuels.that.shifted_Xstand, fuels.that.shifted)]
shift_upper_1_x_stand <- shift_upper_1[match(fuels.that.shifted_Xstand, fuels.that.shifted)]
shift_upper_2_x_stand <- shift_upper_2[match(fuels.that.shifted_Xstand, fuels.that.shifted)]
shift_upper_x_stand <- apply(matrix(data = c(shift_upper_1_x_stand, shift_upper_2_x_stand),
length(shift_upper_1_x_stand), 2), 1, sample,
size = 1)
mfri_lower.List[Stand.List %in% stands.that.shifted] <- shift_lower_x_stand
mfri_upper.List[Stand.List %in% stands.that.shifted] <- shift_upper_x_stand
#Update the .tslt objects for any stands affected by changes in age or mFRI
shift.in.tslt_stands <- tslt.Stands[match(stands.that.shifted, tslt.Stands)]
shift.in.tslt_stands <- shift.in.tslt_stands[!is.na(shift.in.tslt_stands) == T]
shift.in.tslt_fuels <- fuels.that.shifted_Xstand[match(shift.in.tslt_stands, stands.that.shifted)]
tslt.Fuelbeds[tslt.Stands %in% shift.in.tslt_stands] <- shift.in.tslt_fuels
#Kill model if any fuelbed numbers are < 0. This means there is an error in the lookup
#table.
if(any(Fuelbed.List < 0) == T | is.list(Fuelbed.List) == T)
{
broken.stands <- Stand.List[Fuelbed.List < 0]
f.orig <- matrix(scan(paste("inputs/sef_fmap_v2_",rows,"x",cols,".txt",
sep = ""),skip = fh.adj),ncol=cols,byrow=T)#16
break
} else
{
#don't break
}
#Create maps for interval years.
if((a %% Interval) == 0)
{
#  #Save Fuelbed Map (f.map).
dt <- Sys.Date()
tm <- format(Sys.time(), format = "%H.%M.%S",
tz = "", usetz = FALSE)
write.table(s.map, file = paste(output_path, "sef_smap_run_", run, "_",
dt,"_",tm,"_R",rows,"xC",cols,"_Y",a,".txt",sep = ""),
append = FALSE, quote = TRUE, sep = " ", eol = "\n", na = "NA",
dec = ".", row.names = FALSE,col.names = FALSE, qmethod =
c("escape", "double"))#
write.table(f.map, file = paste(output_path, "sef_fmap_run_", run, "_",
dt,"_",tm,"_R",rows,"xC",cols,"_Y",a,".txt",sep = ""),
append = FALSE, quote = TRUE, sep = " ", eol = "\n", na = "NA",
dec = ".", row.names = FALSE,col.names = FALSE, qmethod =
c("escape", "double"))#
}
} #1.0.0 ---------------------------------------------------------------------------
}
entireScript()
###################################################################################################
############################-----start-----########################################################
#Author: Jim Cronan
#Create GitHub repository (FDM-RasterCatalogue): October 8, 2017
#Updated: October 9, 2017
#Tested: October 9, 2017
#PURPPOSE -- CREATE INPUT FILES FOR FDM
#THIS SCRIPT SHOULD BE INCORPORATED INTO preFDM, OR RUN AFTERWARDS. IT USES DATA GENERATED
#BY preFDM.
#This file is updated from C:\usfs_r_scripts\sef_2016.06.29_interFDMv2.r
#It has been updated to allow user to subset the map so a smaller set of data
#can be modelled in the FDM-fireProgression package.
###################################################################################################
###################################################################################################
#STEP #1: ADMINISTRATIVE TASKS
#Reset functions
rm(list=ls())
dev.off()
####################################################################################
############################-----start-----#########################################
####################################################################################
####################################################################################
#This code sets up tables used to make the mapping loop run more efficiently in
#the Fuelbed Dynamics Model. Inputs are set to a 4 ha resolution map.
library(Hmisc)
#Select a fire progression run ID, this should be a number, ideally unique that will help track this
#run. Output files are tagged with this ID number.
RUN <- 101
#What is your working directory. I.e. where are your input files coming from?
input_path <- "C:/Users/jcronan/Documents/GitHub/FDM-RasterCatalogue/FDM_outputs"
#What is your output directory. I.e., here do you want maps and status reports to
#go?
output_path <- "C:/Users/jcronan/Documents/GitHub/FDM-RasterCatalogue/FDM_outputs"
#Set working directory
setwd(input_path)
#THESE PROMPTS (rows and columns) SHOULD BE THE SAME AS THE MODEL RUN
#Enter the number of rows and columns
rows <- 176
cols <- 253
getwd()
git help stash
git help
f.head <- matrix(scan("r1021101.asc",skip = 0),ncol=253,byrow=T)
setwd("C:/Users/jcronan/Documents/GitHub/FDM-Eglin-Analysis/FDM_Output_Maps/")
f.head <- matrix(scan("r1021101.asc",skip = 0),ncol=253,byrow=T)
library(raster)
install.packages("raster")
library(raster)
f.head <- raster("r1021101.asc")
str(f.head)
f.head[1]
f.head[0]
f.head$file
f.head$$file
f.head@file
f.head@ncols
#Import input parameters
params <- read.table(input_params.csv, header=TRUE,
sep=",", na.strings="NA", dec=".", strip.white=TRUE)
#Set working directory
setwd("C:/Users/jcronan/Documents/GitHub/FDM-Eglin-Analysis/")
#Import input parameters
params <- read.table(input_params.csv, header=TRUE,
sep=",", na.strings="NA", dec=".", strip.white=TRUE)
setwd("C:/Users/jcronan/Documents/GitHub/FDM-Eglin-Analysis")
#Import input parameters
params <- read.table(input_params.csv, header=TRUE,
sep=",", na.strings="NA", dec=".", strip.white=TRUE)
#Set working directory
setwd("C:/Users/jcronan/Documents/GitHub/FDM-Eglin-Analysis/")
#Import input parameters
params <- read.table(input_params.csv, header=TRUE,
sep=",", na.strings="NA", dec=".", strip.white=TRUE)
#Import .asc files
f.map <- matrix(scan(paste("sef_", RUN, "_fmap_R",rows,"xC",cols,".txt",
sep = ""),skip = fh.adj),ncol=cols,byrow=T)
setwd("C:/Users/jcronan/Documents/GitHub/FDM-Eglin-Analysis")
getwd()
params <- read.table(input_params.csv, header=TRUE,
sep=",", na.strings="NA", dec=".", strip.white=TRUE)
params <- read.table(README.txt, header=TRUE,
sep=",", na.strings="NA", dec=".", strip.white=TRUE)
params <- read.table(input_params.csv, header=TRUE,
sep=",", na.strings="NA", dec=".", strip.white=TRUE)
params <- read.csv(input_params.csv, header=TRUE,
sep=",", na.strings="NA", dec=".", strip.white=TRUE)
setwd("C:/Users/jcronan/Documents/GitHub/FDM-Eglin-Analysis")
#Import input parameters
params <- read.csv(input_params.csv, header=TRUE,
sep=",", na.strings="NA", dec=".", strip.white=TRUE)
params <- read.csv("C:/Users/jcronan/Documents/GitHub/FDM-Eglin-Analysis/input_params.csv", header=TRUE,
sep=",", na.strings="NA", dec=".", strip.white=TRUE)
params
params <- read.csv("input_params.csv", header=TRUE,
sep=",", na.strings="NA", dec=".", strip.white=TRUE)
#Import input parameters
params <- read.csv("input_params.csv", header=TRUE,
sep=",", na.strings="NA", dec=".", strip.white=TRUE)
